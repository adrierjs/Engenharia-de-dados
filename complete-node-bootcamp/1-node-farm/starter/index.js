const fs = require('fs')
const http = require('http');
const { json } = require('stream/consumers');
//////////////////////////////////////////////////////////////////////////
///////FILES - Manipula√ß√£o de arquivos de forma s√≠ncrona e ass√≠ncrona

// //Bloqueio s√≠ncrono - s√≥ executa uma linha por vez
// const textIn = fs.readFileSync('./txt/input.txt','utf-8')
// console.log(`O texto de entrada foi: ${textIn}`)

// const textOut = (`Entrada: ${textIn} \nSa√≠da: O texto de sa√≠da digitado por Adrier Jos√©, no dia: ${Date.now()}`)

// fs.writeFileSync('./txt/output.txt', textOut)


//Forma n√£o bloqueadora, ass√≠ncrona.

// fs.readFile(`./txt/start.txt`,'utf-8', (err,data) =>{ //ler o arquivo start.xt
//     if(err) return console.log('Error! üí©') //se tiver erro na primeira fun√ß√£o, ele ir√° parar a execu√ß√£o do c√≥digo
//     fs.readFile(`./txt/${data}.txt`,'utf-8', (err,data2) =>{ //o nome do arquivo start.txt executa o arquivo red-this.txt
//         console.log(data2)
//         fs.readFile(`./txt/append.txt`,'utf-8', (err,data3) =>{ //o nome do arquivo start.txt executa o arquivo red-this.txt
//             console.log('\n',data3)
//             fs.writeFile('./txt/final.txt',`${data2}\n${data3}`, err =>{
//                 console.log('N√£o houveram erros na grava√ß√£o do arquivo, ele foi escrito normalmente!')
//             })
//         });
//     });
// });

// console.log('Processando a opera√ß√£o')


//////////////////////////////////////////////////////////////////////////
///////SERVER

//A vantagem de colocar o arquivo da API para executar logo no come√ßo do c√≥digo √© o ganho de mem√≥ria que √© proporcionado por conta disso
const data = fs.readFileSync(`${__dirname}/dev-data/data.json`, 'utf-8'); // ele j√° carregou o arquivo de forma s√≠ncrona, assim que ocorrer a primeira execu√ß√£o do c√≥digo
const dataObj = JSON.parse(data) //comando para executar arquivo Json

const server = http.createServer((req,res)=>{
    const caminho = req.url 
    //Roteamento
    if(caminho === '/' || caminho ==='/home'){
        res.end('Bem vindo a pagina inicial do site')
    } else if(caminho === '/p2'){
        res.end('Segunda pagina')

    } else if(caminho === "/api"){
        // --------- Nesta forma aqui √© menos eficiente, pois a cada execu√ß√£o do usu√°rio a esse caminho, ele ter√° que novamente carregar o arquivo Json.
        // fs.readFile(`${__dirname}/dev-data/data.json`, 'utf-8', (err,data)=>{ //o __dirname √© para executar em qualquer diret√≥rio atual, coloquei mais detalhes no curso da udemy
        //     const produtcData = JSON.parse(data) //comando para executar arquivo Json
            res.writeHead(200,{
                'Tipo-de-conteudo': '/application/json',
                'my-header':'API'
            })
            res.end(data)
        }

    else if(caminho === '/p3'){
        res.end('Terceira pagina')
    } else{
        res.writeHead(404,{
            'Tipo-de-conteudo': 'text/html',
            'my-heder' : 'hello world!'
        }) //comando para mostrar o erro 404 - p√°gina n√£o encontrada no console
        res.end('<h1>Pagina nao encontrada<h1>')
    }
});

server.listen(8000,'127.0.0.1', ()=>{
    console.log("Escutando na porta 8000")
});




